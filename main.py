import subprocess
import re
import requests
import webbrowser
import os
import shutil
import time
from tkinter import Tk, Button, Label, filedialog, messagebox
from PIL import Image

def convert_to_decimal(line):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ 'X deg Y' Z" N/S/E/W' –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ."""
    match = re.search(r': ([0-9.]+) deg(?: ([0-9.]+)\')?(?: ([0-9.]+)")? ([NSEW])', line)
    if not match:
        return None
    degrees, minutes, seconds, direction = match.groups()
    decimal = float(degrees)
    if minutes:
        decimal += float(minutes) / 60
    if seconds:
        decimal += float(seconds) / 3600
    if direction in ['S', 'W']:
        decimal *= -1
    return decimal

def get_gps_info(path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ EXIF-–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if not shutil.which('exiftool'):
        messagebox.showerror("–û—à–∏–±–∫–∞", "exiftool –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å https://exiftool.org/")
        return None, None

    if not path.lower().endswith(('.jpg', '.jpeg')):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPEG-—Ñ–∞–π–ª—ã.")
        return None, None

    try:
        output = subprocess.check_output(['exiftool', os.path.normpath(path)], stderr=subprocess.STDOUT).decode()
        lat, lon = None, None
        for line in output.split('\n'):
            if "GPS Latitude" in line and "Ref" not in line:
                lat = convert_to_decimal(line)
            elif "GPS Longitude" in line and "Ref" not in line:
                lon = convert_to_decimal(line)
        if not lat or not lon:
            messagebox.showwarning("–ù–µ—Ç GPS", "GPS-–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ.")
            return None, None
        if not (-90 <= lat <= 90 and -180 <= lon <= 180):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
            return None, None
        return lat, lon
    except subprocess.CalledProcessError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å EXIF-–¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª.")
        return None, None
    except FileNotFoundError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "exiftool –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None, None
    except UnicodeDecodeError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö EXIF.")
        return None, None

def reverse_geocode(lat, lon):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ GPS-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ Nominatim API."""
    try:
        url = "https://nominatim.openstreetmap.org/reverse"
        params = {'format': 'json', 'lat': lat, 'lon': lon, 'zoom': 18, 'addressdetails': 1}
        headers = {'User-Agent': 'KaliPhotoGPS/1.0 (your_email@example.com)'}
        response = requests.get(url, params=params, headers=headers, timeout=5)
        response.raise_for_status()
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Nominatim
        return response.json().get("address", {})
    except requests.exceptions.RequestException as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return None
    except ValueError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
        return None

def show_result(lat, lon, address):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É."""
    lines = []
    if "country" in address:
        lines.append(f"üåç –°—Ç—Ä–∞–Ω–∞: {address.get('country')}")
    if "state" in address:
        lines.append(f"üèûÔ∏è –†–µ–≥–∏–æ–Ω: {address.get('state')}")
    if "city" in address or "town" in address or "village" in address:
        lines.append(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {address.get('city') or address.get('town') or address.get('village')}")
    if "road" in address:
        lines.append(f"üõ£Ô∏è –£–ª–∏—Ü–∞: {address.get('road')}")
    if not lines:
        lines.append("‚ÑπÔ∏è –ê–¥—Ä–µ—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ.")
    
    map_link = f"https://www.google.com/maps?q={lat},{lon}"
    lines.append(f"üó∫Ô∏è –ö–∞—Ä—Ç–∞: {map_link}")
    messagebox.showinfo("–ê–¥—Ä–µ—Å", "\n".join(lines))
    webbrowser.open(map_link)

def select_file():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ."""
    path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ", filetypes=[("Images", "*.jpg *.jpeg")])
    if not path:
        return

    try:
        Image.open(path).close()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    except Exception:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
        return

    root.config(cursor="wait")  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    lat, lon = get_gps_info(path)
    root.config(cursor="")  # –°–Ω–∏–º–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if not lat or not lon:
        return

    address = reverse_geocode(lat, lon)
    if not address:
        return

    show_result(lat, lon, address)

# --- GUI ---
root = Tk()
root.title("–ú–µ—Å—Ç–æ –ø–æ —Ñ–æ—Ç–æ")
root.geometry("300x160")
root.minsize(300, 160)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
root.bind('<Escape>', lambda e: root.quit())  # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Esc

label = Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ —Å GPS", font=("Arial", 12))
label.pack(pady=20)

btn = Button(root, text="–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ", command=select_file)
btn.pack()

btn_exit = Button(root, text="–í—ã—Ö–æ–¥", command=root.quit)
btn_exit.pack(pady=10)

root.mainloop()
